# Реализовать программу работы с органическими клетками.

# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
#  - сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__()).
# Данные методы должны применяться только к клеткам и выполнять:
#  - увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.

# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля
# Иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например,
# количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или,
# количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cell: int):
        self.cell = cell

    def __str__(self):
        if not self.cell:
            return 'Клетка не существует'
        return '*' * self.cell

    def __add__(self, other):
        return Cell(self.cell + other.cell)

    def __sub__(self, other):
        return Cell(abs(self.cell - other.cell))

    def __mul__(self, other):
        return Cell(self.cell * other.cell)

    def __floordiv__(self, other):
        return Cell(self.cell // other.cell)

    def make_order(self, row=1):
        return ('{:*>{row}}'.format('\n', row=row + 1)) * (self.cell // row) + ('*' * (self.cell % row))


cell_1 = Cell(13)
cell_2 = Cell(14)

# print(cell_1)
# print(cell_1 + cell_2)  # 27
# print(cell_1 - cell_2)  # 1
# print(cell_2 - cell_1)  # 1
# print(cell_1 * cell_2)  # 182
# print(cell_1 // cell_2)  # Клетка не существует
# print(cell_2 // cell_1)  # 1

# print(cell_1.make_order(3))  # ***\n***\n***\n***\n*
print(cell_1.make_order(5))  # *****\n*****\n***
